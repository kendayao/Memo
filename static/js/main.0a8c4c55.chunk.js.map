{"version":3,"sources":["components/header/Header.js","components/form/Form.js","components/footer/Footer.js","components/note/Note.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","alt","src","Form","props","useState","isExpanded","setIsExpanded","title","content","note","setNote","handleInputChange","event","preventDefault","target","name","value","prevNote","onChange","placeholder","onClick","rows","Zoom","in","Fab","onAdd","Footer","currentYear","Date","getFullYear","Note","delete","id","App","useEffect","storedToDos","JSON","parse","localStorage","getItem","setNotes","notes","handleDelete","prevNotes","filter","index","setItem","stringify","map","noteItem","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wUAWeA,MARf,WACI,OACI,gCACI,yBAAKC,UAAU,OAAOC,IAAI,YAAYC,IAAI,kCAAkC,sC,yDC6CzEC,MA7Cf,SAAcC,GAAO,IAAD,EAGkBC,oBAAS,GAH3B,mBAGTC,EAHS,KAGGC,EAHH,OAIKF,mBAAS,CAC1BG,MAAM,GACNC,QAAQ,KANI,mBAIVC,EAJU,KAIJC,EAJI,KAShB,SAASC,EAAkBC,GACvBA,EAAMC,iBADuB,MAETD,EAAME,OAAnBC,EAFsB,EAEtBA,KAAMC,EAFgB,EAEhBA,MAEbN,GAAQ,SAAAO,GACJ,OAAO,2BAAIA,GAAX,kBAAsBF,EAAMC,OAkBpC,OACI,6BACI,0BAAMjB,UAAU,eACXM,EAAa,2BAAOa,SAAUP,EAAmBK,MAAOP,EAAKF,MAAOQ,KAAK,QAAQI,YAAY,UAAkB,KAChH,8BAAUC,QATvB,WACId,GAAc,IAQsBY,SAAUP,EAAmBI,KAAK,UAAUI,YAAY,kBAAkBE,KAAMhB,EAAa,IAAK,IAAKW,MAAOP,EAAKD,UAC9I,kBAACc,EAAA,EAAD,CAAMC,KAAIlB,GACV,kBAACmB,EAAA,EAAD,CAAKJ,QApBjB,SAAoBR,GAChBA,EAAMC,iBACNV,EAAMsB,MAAMhB,GACZC,EAAQ,CACJH,MAAO,GACPC,QAAS,OAeqB,kBAAC,IAAD,W,MC/B3BkB,MAVf,WAEI,IAAMC,GAAY,IAAIC,MAAOC,cAC7B,OACI,gCACI,6CAAqBF,EAArB,O,yBCWGG,MAdf,SAAc3B,GAEV,OACI,yBAAKJ,UAAU,QACX,4BAAKI,EAAMI,OACX,2BAAIJ,EAAMK,SACV,4BAAQY,QAAS,kBAAIjB,EAAM4B,OAAO5B,EAAM6B,MAAK,kBAAC,IAAD,S,MCuC1CC,MA3Cf,WAEEC,qBAAU,WACR,IAAMC,EAAYC,KAAKC,MAAMC,aAAaC,QAAQ,SAClDC,EAASL,KACX,IALa,MAOU/B,mBAAS,IAPnB,mBAOPqC,EAPO,KAOAD,EAPA,KAeb,SAASE,EAAaV,GACpBQ,GAAS,SAAAG,GACP,OAAOA,EAAUC,QAAO,SAACnC,EAAMoC,GAC7B,OAAOA,IAASb,QAUtB,OALAE,qBAAU,WACRI,aAAaQ,QAAQ,OAAQV,KAAKW,UAAUN,MAC9C,CAACA,IAIC,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMhB,MAtBV,SAAiBhB,GACf+B,GAAS,SAAAG,GAAS,4BACZA,GADY,CACDlC,QAoBOgC,MAAOA,IAC5BA,EAAMO,KAAI,SAACC,EAAUJ,GACpB,OAAO,kBAAC,EAAD,CAAMK,IAAKL,EAAOb,GAAIa,EAAOd,OAAQW,EAAcnC,MAAO0C,EAAS1C,MAAQC,QAASyC,EAASzC,aAGtG,kBAAC,EAAD,QC/Bc2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0a8c4c55.chunk.js","sourcesContent":["import React from 'react'\nimport './Header.css'\n\nfunction Header(){\n    return (\n        <header>\n            <img className=\"logo\" alt=\"memo-logo\" src=\"../../../public/memo_logo.png\" /><h1>Memo</h1>\n        </header>\n    )\n}\n\nexport default Header","import React, {useState} from 'react'\nimport './Form.css'\nimport AddIcon from '@material-ui/icons/Add';\nimport Fab from '@material-ui/core/Fab';\nimport Zoom from '@material-ui/core/Zoom';\n\nfunction Form(props){\n\n\n    const [isExpanded, setIsExpanded]=useState(false)\n    const[note, setNote]=useState({\n        title:\"\",\n        content:\"\"\n    })\n\n    function handleInputChange(event){\n        event.preventDefault()\n        const {name, value}=event.target\n\n        setNote(prevNote=>{\n            return {...prevNote, [name]:value}\n        })\n    }\n    \n    function submitNote(event){\n        event.preventDefault();\n        props.onAdd(note)\n        setNote({\n            title: \"\",\n            content: \"\"\n        })\n    }\n\n   function expand(){\n       setIsExpanded(true)\n   }\n  \n\n    return(\n        <div>\n            <form className='create-note'>\n                {isExpanded ? <input onChange={handleInputChange} value={note.title} name='title' placeholder='Title'></input> :null}\n                <textarea onClick={expand} onChange={handleInputChange} name='content' placeholder='Write a note...' rows={isExpanded ? '3': '1'} value={note.content}></textarea>\n                <Zoom in={isExpanded?true:false}>\n                <Fab onClick={submitNote}><AddIcon /></Fab>\n                </Zoom>\n            </form>\n        </div>\n    )\n}\n\nexport default Form","import React from 'react'\nimport './Footer.css'\n\nfunction Footer(){\n\n    const currentYear=new Date().getFullYear();\n    return(\n        <footer>\n            <p>Copyright &copy; {currentYear} </p>\n        </footer>\n    )\n}\n\nexport default Footer","import React from 'react'\nimport './Note.css'\nimport DeleteIcon from '@material-ui/icons/Delete';\n\n\nfunction Note(props){\n    \n    return(\n        <div className='note'>\n            <h1>{props.title}</h1>\n            <p>{props.content}</p>\n            <button onClick={()=>props.delete(props.id)}><DeleteIcon /></button>\n        </div>\n        \n    )\n    \n    \n}\n\nexport default Note","import React, { useEffect, useState } from 'react';\nimport Header from './components/header/Header'\nimport Form from './components/form/Form'\nimport Footer from './components/footer/Footer'\nimport Note from './components/note/Note'\nimport './App.css';\n\nfunction App() {\n\n  useEffect(()=>{\n    const storedToDos=JSON.parse(localStorage.getItem('toDo'))\n    setNotes(storedToDos)\n},[])\n  \n  const[notes, setNotes]=useState([])\n  \n  function addNote(note){\n    setNotes(prevNotes=>\n      [...prevNotes, note]\n    )\n  }\n\n  function handleDelete(id){\n    setNotes(prevNotes=>{\n      return prevNotes.filter((note, index)=>{\n        return index !==id\n      })\n    })\n  }\n\n  useEffect(()=>{\n    localStorage.setItem('toDo', JSON.stringify(notes))\n},[notes])\n\n  \n  return (\n    <div>\n      <Header />\n      <Form onAdd={addNote} notes={notes}  />\n      {notes.map((noteItem, index)=>{\n        return <Note key={index} id={index} delete={handleDelete} title={noteItem.title}  content={noteItem.content} />\n      })}\n      \n      <Footer />\n    </div>\n  )\n \n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}